import telebot
from telebot import types
import sqlite3
from random import randint
import markovify
from pymorphy2 import MorphAnalyzer
morph = MorphAnalyzer()

bot = telebot.TeleBot('–º–æ–π —Ç–æ–∫–µ–Ω')



# –°—Ä–∞–∑—É –æ–±—É—á–∏–º –º–∏–Ω–∏ –º–æ–¥–µ–ª—å–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è----------------------------------------

con = sqlite3.connect('le_petit_db_save_me.db') # –ø–æ–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π (–Ω–µ —Ç–æ—Ç –∏ –Ω–µ —Ç–∞)
cur = con.cursor()
comedy_query = """
SELECT anecs.id, anecs.text FROM anecs
"""
cur.execute(comedy_query, )
longlist = cur.fetchall()
longlist[0]
all_anecs = ""
for i in longlist:
    all_anecs += i[1]
    all_anecs += " "

pop_rikolu_model = markovify.Text(all_anecs)

# –°—Ä–∞–∑—É –∂–µ —Å–æ–±–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤ -------------------------------------
# (–Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∞ –ø—Ä–∏—á–∏–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –¥–∂—ç–π—Å–æ–Ω–µ)

con = sqlite3.connect('le_petit_db_save_me.db') # –ø–æ–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π (–Ω–µ —Ç–æ—Ç –∏ –Ω–µ —Ç–∞)
cur = con.cursor()
tag_query = """
SELECT tag, id_tag FROM tags
"""
cur.execute(tag_query, )
we_have_tags = dict(cur.fetchall())


# –¢—É—Ç —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ----------------------------------------

def take_tag(word):
    word = word.strip(' ')
    normal_word = morph.parse(word)[0].normal_form
    if normal_word in we_have_tags:
        division = normal_word
    else:
        division = "–û–π, —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç—ç–≥–∞ ;( \n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π!"
    return division


# –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞-----------------------------------------------------------------

@bot.message_handler(commands=['start'])
def starter(message):
    bot.send_message(message.from_user.id, "–¢—É—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\
                                           –Ω–æ —è —è–≤–Ω–æ –µ–≥–æ –µ—â–µ –ø–æ–º–µ–Ω—è—é..",
                     parse_mode='Markdown')
    chat_id = message.chat.id


@bot.message_handler(commands=['help'])
def starter(message):
    bot.send_message(message.from_user.id, "–¢—É—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\
                                           –Ω–æ —è —è–≤–Ω–æ –µ–≥–æ –µ—â–µ –ø–æ–º–µ–Ω—è—é..", 
                     parse_mode='Markdown')
    chat_id = message.chat.id


@bot.message_handler(commands=['menu'])
def menu(message):
    start_menu = types.ReplyKeyboardMarkup(True, True)
    start_menu.row('Random üêá')
    start_menu.row('–ß—É–¥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π üêì')
    start_menu.row('–ê–Ω–µ–∫–¥–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–ºüö∂‚Äç‚ôÇ')
    start_menu.row('–°–≤–æ–π –∞–Ω–µ–∫–¥–æ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
    bot.send_message(message.chat.id, '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é', \
                     reply_markup=start_menu)
    
#  –Ω–∞–∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º

@bot.message_handler(content_types=['text'])
def after_first_message(message):
    if message.text == '–ê–Ω–µ–∫–¥–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–ºüö∂‚Äç‚ôÇ' or message.text == "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë.." or message.text == "–ê–Ω–µ–∫–¥–æ—Ç —Å –¥—Ä—É–≥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º":
#        msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ', reply_markup = start_menu)
        msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —Ç–æ–ø–∏–∫, –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–∏—Ç–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç')
        bot.register_next_step_handler(msg, after_second_message)

    elif "Random" in message.text:
        string_of = "üêìü¶¢üïäüêáüêÅüêë‚òÅÔ∏èüçöüí≠üï∏üòçüé¢üíÖüèª‚ù§Ô∏è‚Äçüî•ü§§üëôü™°ü•ºü¶ãü¶üüçò" # –û–π, –∫–∞–∫ –ø—Ä–∏–∫–æ–ª—å–Ω–æ, –æ–Ω–∏ –º–µ–Ω—è—é—Ç—Å—è
        a = randint(0, len(string_of)-1)
        b = randint(0, len(string_of)-1)
        c = randint(0, len(string_of)-1)
        text_random = "–ï—â—ë Random " + string_of[a] + string_of[b] + string_of[c]
        start_menu = types.ReplyKeyboardMarkup(True, True)
        start_menu.row(text_random)
        start_menu.row('‚ú®—á—É–¥–æ‚ú® —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ')
        start_menu.row('–ê–Ω–µ–∫–¥–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–ºüö∂‚Äç‚ôÇ')
        start_menu.row('–°–≤–æ–π –∞–Ω–µ–∫–¥–æ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
        conn = sqlite3.connect('le_petit_db_save_me.db', check_same_thread=False)
        cur = conn.cursor()
        comedy_query = """
        	SELECT *
        	FROM anecs
        	"""
        cur.execute(comedy_query)
        b = cur.fetchall()

        def solve():
            a = randint(0, 5960)
            if len(b[a]) > 1:
                text = str(b[a][1])
                bot.send_message(message.chat.id, text, reply_markup=start_menu)
            else:
                solve()
        solve()

    elif message.text == "‚ú®—á—É–¥–æ‚ú® —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π" or message.text == "–ï—â—ë ‚ú®—á—É–¥–æ‚ú® —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π":
        start_menu = types.ReplyKeyboardMarkup(True, True)
        start_menu.row('Random üêá')
        start_menu.row('–ï—â—ë ‚ú®—á—É–¥–æ‚ú® —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π')
        start_menu.row('–ê–Ω–µ–∫–¥–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–ºüö∂‚Äç‚ôÇ')
        start_menu.row('–°–≤–æ–π –∞–Ω–µ–∫–¥–æ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
        text_for_sending = pop_rikolu_model.make_sentence()
        bot.send_message(message.chat.id, text_for_sending, reply_markup=start_menu)

    elif message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        start_menu = types.ReplyKeyboardMarkup(True, True)
        start_menu.row('Random üêá')
        start_menu.row('‚ú®—á—É–¥–æ‚ú® —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π')
        start_menu.row('–ê–Ω–µ–∫–¥–æ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–ºüö∂‚Äç‚ôÇ')
        start_menu.row('–°–≤–æ–π –∞–Ω–µ–∫–¥–æ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
        bot.send_message(message.chat.id, '–í—ã –≤—É—Ä–Ω—É–ª–∏—Å—å –≤ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é', \
                         reply_markup=start_menu)

def after_second_message(message):
    textc = take_tag(message.text)
    if textc == "–û–π, —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç—ç–≥–∞ ;( \n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π!":
        start_menu = types.ReplyKeyboardMarkup(True, True)
        start_menu.row('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë..')
        start_menu.row('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        bot.send_message(message.chat.id, textc, reply_markup=start_menu)
    else:
        number_of_tag = str(we_have_tags[textc])
        final_query = """
        SELECT text FROM anecs
        JOIN text_to_tag ON anecs.id = text_to_tag.id_anec
        JOIN tags ON text_to_tag.id_tag = tags.id_tag
        WHERE tags.id_tag == """ + number_of_tag
        con = sqlite3.connect('le_petit_db_save_me.db')  # (–Ω–µ —Ç–æ—Ç –∏ –Ω–µ —Ç–∞)
        cur = con.cursor()
        cur.execute(final_query)
        longlist = cur.fetchall()
        a = randint(0, len(longlist) - 1)
        anec = longlist[a][0]
        start_menu = types.ReplyKeyboardMarkup(True, True)
#        start_menu.row('–ê–Ω–µ–∫–¥–æ—Ç —Å —ç—Ç–∏–º –∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–ºüö∂‚Äç‚ôÇ')
        start_menu.row('–ê–Ω–µ–∫–¥–æ—Ç —Å –¥—Ä—É–≥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º')
        start_menu.row('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        bot.send_message(message.from_user.id, anec, reply_markup=start_menu)




# —á—Ç–æ–±—ã –±–æ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è--------------------------------------------
bot.polling(none_stop=True, interval=0) 
